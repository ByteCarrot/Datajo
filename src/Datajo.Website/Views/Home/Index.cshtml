@using ByteCarrot.Datajo.Website
@model dynamic

@{
    Layout = MVC.Shared.Views._Layout;
}

<a id="overview"></a>
<h2>Datajo</h2>
<div class="row-fluid">
    <div class="span4 well">
        <h4>Easy to use</h4>
        <p>Even monkey would be able to use Datajo ;)</p>
    </div>
    <div class="span4 well">
        <h4>Declarative</h4>
        <p>Clean HTML, without strange JavaScript blocks</p>
    </div>
    <div class="span4 well">
        <h4>Based on jQuery</h4>
        <p>Wraps common tasks often implemented with jQuery</p>
    </div>
</div>
<div class="row-fluid">
    <div class="span4 well text-center">
        <a id="download"></a>
        <a class="btn btn-large btn-info">Download v0.1</a>
    </div>
    <div class="span4 well text-center" style="min-height: 84px">
        Available as <strong>NuGet</strong> package<br />
        <code>> Install-Package Datajo</code>
    </div>
    <div class="span4 well text-center" style="min-height: 84px; padding-top: 25px">
        Hosted on <strong>GitHub</strong>&nbsp;
        <a href="https://github.com/bytecarrot/Datajo" target="_blank"><img src="~/Content/images/blacktocat.png" alt="GitHub" /></a>
    </div>
</div>
<p><strong>Datajo</strong> - wraps common jQuery tasks in a form of unobtrusive, declarative actions defined directly on HTML elements. Take a look at two examples:</p>
<h3><i>hide</i> example</h3>
<strong>jQuery code to hide a HTML element</strong>
<pre class="brush: js">
<script type="text/javascript">
    $(function () {
        $('a').click(function () {
            $('#box').hide({
                duration: 1000,
                easing: 'linear'
            });
        });
    });
</script>
</pre>
<strong>can be replaced by:</strong>
<pre class="brush: xml">
    <a data-jo='{"action":"hide","target":"#box","easing":"linear","duration":1000}'>Click me!</a>
</pre>
<h3><i>form submission</i> example</h3>
<strong>This chunk of jQuery</strong>
<pre class="brush: js">
<script type="text/javascript">
    $(function () {
        var form = $('#form1');
        form.on('submit', function () {
            event.preventDefault();
            if (!confirm('Are you sure?')) {
                return;
            }

            if ($.validator !== undefined && !form.valid()) {
                return;
            }

            $.post('/examples/submitevent', form.serializeArray(), function (html) {
                form.replaceWith(html);
            });
        });
    });
</script>
</pre>
<strong>can be replaced with:</strong>
<pre class="brush: xml">
    <form data-jo='{"action":"post","target":"_self","url":"/examples/submitevent","form":"_self","inject":"replaceTarget","event":"submit","confirm":"Are you sure?"}'></form>
</pre>
<hr />
<a id="installation"></a>
<h2>Manual installation</h2>
<ul>
    <li>Download <a href="http://jquery.com/" target="_blank">jQuery</a> and add reference to it in your HTML</li>
    <li>If you need more advanced easings, download <a href="http://jqueryui.com/">jQuery UI</a> and add reference to it in your HTML (remember, this step is not mandatory)</li>
    <li>Download <a href="http://datajo.net">Datajo</a> and add reference to it in your HTML</li>
</ul>
<div class="alert alert-success">
    That is it. There is no additional setup. Just start declaring actions.
</div>
<pre class="brush: xml">
    <script type="text/javascript" src="jquery-1.8.3.min.js"></script>
    <script type="text/javascript" src="jquery-ui-1.9.2.min.js"></script>
    <script type="text/javascript" src="datajo.js"></script>
</pre>
